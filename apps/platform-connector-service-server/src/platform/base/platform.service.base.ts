/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Platform as PrismaPlatform } from "@prisma/client";

export class PlatformServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlatformCountArgs, "select">): Promise<number> {
    return this.prisma.platform.count(args);
  }

  async platforms(
    args: Prisma.PlatformFindManyArgs
  ): Promise<PrismaPlatform[]> {
    return this.prisma.platform.findMany(args);
  }
  async platform(
    args: Prisma.PlatformFindUniqueArgs
  ): Promise<PrismaPlatform | null> {
    return this.prisma.platform.findUnique(args);
  }
  async createPlatform(
    args: Prisma.PlatformCreateArgs
  ): Promise<PrismaPlatform> {
    return this.prisma.platform.create(args);
  }
  async updatePlatform(
    args: Prisma.PlatformUpdateArgs
  ): Promise<PrismaPlatform> {
    return this.prisma.platform.update(args);
  }
  async deletePlatform(
    args: Prisma.PlatformDeleteArgs
  ): Promise<PrismaPlatform> {
    return this.prisma.platform.delete(args);
  }
}
