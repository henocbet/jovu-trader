/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradeLogService } from "../tradeLog.service";
import { TradeLogCreateInput } from "./TradeLogCreateInput";
import { TradeLog } from "./TradeLog";
import { TradeLogFindManyArgs } from "./TradeLogFindManyArgs";
import { TradeLogWhereUniqueInput } from "./TradeLogWhereUniqueInput";
import { TradeLogUpdateInput } from "./TradeLogUpdateInput";

export class TradeLogControllerBase {
  constructor(protected readonly service: TradeLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradeLog })
  async createTradeLog(
    @common.Body() data: TradeLogCreateInput
  ): Promise<TradeLog> {
    return await this.service.createTradeLog({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        logDetails: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradeLog] })
  @ApiNestedQuery(TradeLogFindManyArgs)
  async tradeLogs(@common.Req() request: Request): Promise<TradeLog[]> {
    const args = plainToClass(TradeLogFindManyArgs, request.query);
    return this.service.tradeLogs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        logDetails: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradeLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradeLog(
    @common.Param() params: TradeLogWhereUniqueInput
  ): Promise<TradeLog | null> {
    const result = await this.service.tradeLog({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        logDetails: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradeLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradeLog(
    @common.Param() params: TradeLogWhereUniqueInput,
    @common.Body() data: TradeLogUpdateInput
  ): Promise<TradeLog | null> {
    try {
      return await this.service.updateTradeLog({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          logDetails: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradeLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradeLog(
    @common.Param() params: TradeLogWhereUniqueInput
  ): Promise<TradeLog | null> {
    try {
      return await this.service.deleteTradeLog({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          logDetails: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
