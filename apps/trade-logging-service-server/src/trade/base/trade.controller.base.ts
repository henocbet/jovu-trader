/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradeService } from "../trade.service";
import { TradeCreateInput } from "./TradeCreateInput";
import { Trade } from "./Trade";
import { TradeFindManyArgs } from "./TradeFindManyArgs";
import { TradeWhereUniqueInput } from "./TradeWhereUniqueInput";
import { TradeUpdateInput } from "./TradeUpdateInput";

export class TradeControllerBase {
  constructor(protected readonly service: TradeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Trade })
  async createTrade(@common.Body() data: TradeCreateInput): Promise<Trade> {
    return await this.service.createTrade({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tradeId: true,
        tradeDetails: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Trade] })
  @ApiNestedQuery(TradeFindManyArgs)
  async trades(@common.Req() request: Request): Promise<Trade[]> {
    const args = plainToClass(TradeFindManyArgs, request.query);
    return this.service.trades({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tradeId: true,
        tradeDetails: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Trade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trade(
    @common.Param() params: TradeWhereUniqueInput
  ): Promise<Trade | null> {
    const result = await this.service.trade({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tradeId: true,
        tradeDetails: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Trade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrade(
    @common.Param() params: TradeWhereUniqueInput,
    @common.Body() data: TradeUpdateInput
  ): Promise<Trade | null> {
    try {
      return await this.service.updateTrade({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tradeId: true,
          tradeDetails: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Trade })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrade(
    @common.Param() params: TradeWhereUniqueInput
  ): Promise<Trade | null> {
    try {
      return await this.service.deleteTrade({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tradeId: true,
          tradeDetails: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
